<Window x:Class="SpotifyNet.Cover.View.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:wpf="clr-namespace:MaterialDesignThemes.Wpf;assembly=MaterialDesignThemes.Wpf"
        xmlns:behavior="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:model="clr-namespace:SpotifyNet.Cover.Model"
        xmlns:vm="clr-namespace:SpotifyNet.Cover.ViewModel"
        xmlns:local="clr-namespace:SpotifyNet.Cover"
        mc:Ignorable="d"
        TextElement.Foreground="{DynamicResource MaterialDesignBody}"
        TextElement.FontWeight="Regular"
        TextElement.FontSize="13"
        TextOptions.TextFormattingMode="Ideal" 
        TextOptions.TextRenderingMode="Auto"        
        Background="{DynamicResource MaterialDesignPaper}"
        FontFamily="{DynamicResource MaterialDesignFont}"
        d:DataContext="{d:DesignInstance Type=vm:MainViewModel}"
        MouseDown="Window_MouseDown"
        Height="640" Width="640" WindowStyle="None" BorderBrush="Black" BorderThickness="1" Topmost="{Binding IsChecked,ElementName=TopMostToggle}">

    <WindowChrome.WindowChrome>
        <WindowChrome CaptionHeight="0" ResizeBorderThickness="5"/>
    </WindowChrome.WindowChrome>

    <Window.Resources>
        <model:MultiBoolConverter x:Key="MultiBool" Operation="Or"/>

        <Style x:Key="CoverGrid" TargetType="Grid">
            <Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor,AncestorLevel=1,AncestorType=Canvas}}" />
            <Setter Property="Height" Value="{Binding ActualHeight, RelativeSource={RelativeSource Mode=FindAncestor,AncestorLevel=1,AncestorType=Canvas}}" />
        </Style>

        <Style x:Key="CoverViewbox" TargetType="Viewbox">
            <Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor,AncestorLevel=1,AncestorType=Grid}}" />
            <Setter Property="Height" Value="{Binding ActualHeight, RelativeSource={RelativeSource Mode=FindAncestor,AncestorLevel=1,AncestorType=Grid}}" />
            <Setter Property="Stretch" Value="Fill" />
            <Setter Property="StretchDirection" Value="Both" />
            <Setter Property="Grid.Row" Value="0" />
            <Setter Property="Grid.Column" Value="0" />
            <Setter Property="Grid.ColumnSpan" Value="99" />
            <Setter Property="Margin" Value="0" />
        </Style>

        <Style x:Key="CoverIcon" TargetType="materialDesign:PackIcon" BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor,AncestorLevel=1,AncestorType=Grid}}" />
            <Setter Property="Height" Value="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor,AncestorLevel=1,AncestorType=Grid}}" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=IsMouseOver,RelativeSource={RelativeSource Mode=FindAncestor,AncestorLevel=1,AncestorType=Canvas}}" Value="True">
                    <Setter Property="Button.Opacity" Value="1"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=IsMouseOver,RelativeSource={RelativeSource Mode=FindAncestor,AncestorLevel=1,AncestorType=Canvas}}" Value="False">
                    <Setter Property="Button.Opacity" Value="0"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="CoverToggle" TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=IsMouseOver}" Value="True">
                    <Setter Property="ToggleButton.Opacity" Value="1.0"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=IsMouseOver}" Value="False">
                    <Setter Property="ToggleButton.Opacity" Value="0.2"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="animateFadeOut" TargetType="TextBlock">
            <Style.Triggers>
                <EventTrigger RoutedEvent="Binding.TargetUpdated">
                    <BeginStoryboard>
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames BeginTime="0:0:0" Storyboard.TargetProperty="Visibility">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimation BeginTime="0:0:0.0" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.2"/>
                            <DoubleAnimation BeginTime="0:0:1.0" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:1.5"/>
                            <ObjectAnimationUsingKeyFrames BeginTime="0:0:2.5" Storyboard.TargetProperty="Visibility">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}"/>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>

    <behavior:Interaction.Triggers>
        <behavior:EventTrigger EventName="Loaded">
            <behavior:InvokeCommandAction Command="{Binding LoadedCommand}"/>
        </behavior:EventTrigger>
        <behavior:EventTrigger EventName="MouseWheel">
            <behavior:InvokeCommandAction Command="{Binding MouseWheelCommand}" PassEventArgsToCommand="True"/>
        </behavior:EventTrigger>
    </behavior:Interaction.Triggers>

    <Grid Margin="0">
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition/>
        </Grid.RowDefinitions>

        <Image Margin="0" Grid.Column="0" Grid.ColumnSpan="99" Grid.Row="0" Source="{Binding Cover}"
               HorizontalAlignment="Stretch"
               VerticalAlignment="Stretch"
               Visibility="{Binding RelativeSource={RelativeSource Self}, Path=Tag, Converter={StaticResource InverseBoolToVisConverter}}">
            <Image.Tag>
                <MultiBinding Converter="{StaticResource MultiBool}">
                    <Binding Path="IsPrivateSession" />
                    <Binding Path="IsOffline" />
                </MultiBinding>
            </Image.Tag>
        </Image>

        <Viewbox Style="{StaticResource CoverViewbox}">
            <TextBlock  Text="{Binding CurrentVolumeString, NotifyOnTargetUpdated=True}" FontSize="50" TextAlignment="Center" Style="{StaticResource animateFadeOut}"/>
        </Viewbox>

        <Viewbox Style="{StaticResource CoverViewbox}"
                 Visibility="{Binding IsPrivateSession, Converter={StaticResource BooleanToVisibilityConverter}}">
            <materialDesign:PackIcon Kind="Incognito" />
        </Viewbox>

        <Viewbox Style="{StaticResource CoverViewbox}"
                 Visibility="{Binding IsOffline, Converter={StaticResource BooleanToVisibilityConverter}}">
            <materialDesign:PackIcon Kind="WifiOff" />
        </Viewbox>

        <Canvas Grid.Row="0" Grid.Column="0" Background="Transparent" MouseLeftButtonDown="CanvasLeft_MouseLeftButtonDown">
            <Grid Style="{StaticResource CoverGrid}">
                <materialDesign:PackIcon Kind="SkipPrevious" Style="{StaticResource CoverIcon}" />
            </Grid>
        </Canvas>
        <Canvas Grid.Row="0" Grid.Column="1" Background="Transparent" MouseLeftButtonDown="CanvasMid_MouseLeftButtonDown">
            <Grid Style="{StaticResource CoverGrid}">
                <materialDesign:PackIcon Kind="PlayPause" Style="{StaticResource CoverIcon}" />
            </Grid>
        </Canvas>
        <Canvas Grid.Row="0" Grid.Column="2" Background="Transparent" MouseLeftButtonDown="CanvasRight_MouseLeftButtonDown">
            <Grid Style="{StaticResource CoverGrid}">
                <materialDesign:PackIcon Kind="SkipNext" Style="{StaticResource CoverIcon}" />
            </Grid>
        </Canvas>

        <ToggleButton Grid.Column="0" Style="{StaticResource CoverToggle}" VerticalAlignment="Bottom" x:Name="TopMostToggle" HorizontalAlignment="Left"/>
    </Grid>
</Window>
